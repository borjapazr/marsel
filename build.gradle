def MARSEL_VERSION = file('marsel.ver').text.trim()

buildscript {
    ext {
        springDependencyManagment = '1.0.11.RELEASE'
        springBootVersion = '2.4.5'
        joolVersion = '0.9.14'
        jjwtVersion = '0.11.2'
        mariaDbJavaClientVersion = '2.7.2'
    }

    repositories {
        gradlePluginPortal()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${springDependencyManagment}"
    }
}

allprojects {
    group = 'space.mars.marsel'
    version = MARSEL_VERSION

    repositories {
        mavenCentral()
        jcenter()
    }
}

subprojects {
    configure(javaProjects()) {
        apply plugin: 'java'
        apply plugin: 'java-library'
        apply plugin: 'io.spring.dependency-management'

        dependencyManagement {
            imports {
                mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            }

            dependencies {
                dependency "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
                dependency "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
                dependency "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"
                dependency "org.jooq:jool:${joolVersion}"
                dependency "org.mariadb.jdbc:mariadb-java-client:${mariaDbJavaClientVersion}"
            }
        }

        dependencies {
            implementation "org.jooq:jool"
            compileOnly 'org.projectlombok:lombok'
            annotationProcessor 'org.projectlombok:lombok'
            annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        }

        configurations {
            compileOnly {
                extendsFrom annotationProcessor
            }
        }

        compileJava {
            sourceCompatibility = JavaVersion.VERSION_11
            targetCompatibility = JavaVersion.VERSION_11
        }

        jar {
            archivesBaseName = "${rootProject.name}-${parent.project.name}-${project.name}"
        }
    }
}

def javaProjects() {
    return subprojects.findAll { new File(it.projectDir, "src/main/java").exists() }
}
